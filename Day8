// Creating your own structs (используйте кортежи, когда вы хотите вернуть два или более произвольных фрагмента значений из функции, но предпочитайте структуры, когда у вас есть некоторые фиксированные данные, которые вы хотите отправить или получить несколько раз.)
struct Sport {
    var name: String
}
var tennis = Sport(name: "Tennis")
print(tennis.name)
tennis.name = "Lawn tennis"
struct WeatherForecast {
    var dayNumber: Int
    var temperature: Int
}
let monday = WeatherForecast(dayNumber: 1, temperature: 25)

// Computed properties
struct Sport2 {
    var name: String
    var isoOlympicSport: Bool
    var olympicStatus: String {
        if isoOlympicSport {
            return "\(name) is an Olympic sport"
        } else {
            return "\(name) is not an Olympic sport"
        }
    }
}
let chessBoxing = Sport2(name: "Chessboxing", isoOlympicSport: false)
print(chessBoxing.olympicStatus)

// Property observers (Наблюдатели свойств Swift позволяют нам присоединять функциональные возможности для запуска до или после изменения свойства, используя соответственно willSet и didSet.)
struct Progress {
    var task: String
    var amount: Int {
    didSet {
        print("\(task) is now \(amount)% complete")
    }
    }
}
var progress = Progress(task: "Loading data", amount: 0)
progress.amount = 30
progress.amount = 80
progress.amount = 100

// Methods
struct City {
    var population: Int
    func collectTaxes() -> Int {
        return population * 1000
    }
}
let london = City(population: 9_000_000)
london.collectTaxes()

// Mutating methods (Если вы хотите изменить свойство внутри метода, вам нужно пометить его с помощью ключевого слова mutating)
struct Person {
    var name: String
    mutating func makeAnonymous() {
        name = "Anonymous"
}
}
var person = Person(name: "Ed")
person.makeAnonymous()
struct BankAccount {
    var balance: Int
    mutating func donateToCharity(amount: Int) {
        balance -= amount
    }
}
struct Delorean {
    var speed = 0
    mutating func accelerate() {
        speed += 1
        if speed == 88 {
            travelThroughTime()
        }
    }
    func travelThroughTime() {
        print("Where we're going we don't need roads.")
    }
}
struct Bicycle {
    var currentGear: Int
    mutating func changeGear(to newGear: Int) {
        currentGear = newGear
        print("I'm now in gear \(currentGear).")
    }
}

// Properties and methods of strings
let string = "Do or do not, there is no try."
print(string.count)
print(string.hasPrefix("Do"))
print(string.uppercased())
print(string.sorted())

// Properties and methods of arrays
var toys = ["Woody"]
print(toys.count)
toys.append("Buzz")
toys.firstIndex(of: "Buzz")
print(toys.sorted())
toys.remove(at: 0)

