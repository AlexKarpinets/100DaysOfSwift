// creating basic closures
let driving = {
    print("I'm driving in my car")
}
driving()

// accepting parameters in a closure
let driving1 = { (place: String) in
    print("I'm goint to \(place) in my car")
}
driving1("London")

// returning values from a closure
let drivingWithReturn = { (place: String) -> String in
    return "I'm going to \(place) in my car"
}
let message = drivingWithReturn("London")
print(message)

// closures as parameters
func travel(action: () -> Void) {
    print("I'm getting ready to go")
    action()
    print("I arrived")
}
travel(action: driving)
let helicopterTravel = {
    print("Get to the chopper!")
}
func travel(by travelMeans: () -> Void) {
    print("Let's go on vacation...")
    travelMeans()
}
travel(by: helicopterTravel)
var learnWithUnwrap = {
    print("Hey, this is fun!")
}
func learnSwift(using approach: () -> Void) {
    print("I'm learning Swift")
    approach()
}
learnSwift(using: learnWithUnwrap)

// trailing closure syntax
func travel1(action: () -> Void) {
    print("I'm getting ready to go")
    action()
    print("I arrived")
}
travel1() {
    print("I'm driving in my car")
}
travel1 {
    print("I'm driving in my car")
}
func makeCake(instructions: () -> Void) {
    print("Wash hands")
    print("Collect ingredients")
    instructions()
    print("Here's your cake!")
}
makeCake {
    print("Mix egg and flour")
}
