// Using closures as parameters when they accept parameters
func travel(action: (String) -> Void) {
    print("I'm getting ready to go.")
    action("London")
    print("I arrived")
}
travel { (place: String) in
    print("I'm going to \(place) in my car")
}

// Using closures as parameters when they return values
func travel1(action: (String) -> String) {
    print("I'm getting ready to go.")
    let description = action("London")
    print(description)
    print("I arrived")
}
travel1 { (place: String) -> String in
    return "I'm going to \(place) in my car"
}
func playSong(_ name: String, notes: () -> String) {
    print("I'm going to play \(name).")
    let playedNotes = notes()
    print(playedNotes)
}
playSong("Mary Had a Little Lamb") {
    return "EDCDEEEDDDEGG"
}

// Shorthand parameter names
func travel2(action: (String) -> String) {
    print("I'm getting ready to go.")
    let description2 = action("London")
    print(description2)
    print("I arrived!")
}
travel2 { (place: String) -> String in
    return "I'm going to \(place) in my car"
}
travel2 { place -> String in
return "I'm going to \(place) in my car"
}
travel2 { place in
    return "I'm going to \(place) in my car"
}
travel2 {
    "I'm going to \($0) in my car"
}

// Closures with multiple parameters
func travel3(action: (String, Int) -> String) {
    print("I'm getting ready to go.")
    let description3 = action("London", 60)
    print(description3)
    print("I arrived!")
}
travel3 {
    "I'm going to \($0) at \($1) miles per hour."
}

// Returning closures from functions
func travel4() -> (String) -> Void {
    return {
        print("I'm going to \($0)")
    }
}
let result = travel4()
result("London")
let result2 = travel4()("London")

// Capturing values
func travel5() -> (String) -> Void {
    var counter = 1
    return {
        print("I'm going to \($0)")
        counter += 1
    }
}
let result5 = travel5()
    result5("London")
    result5("London")
    result5("London")
