// Protocol
protocol Identifiable {
    var id: String { get set }
}
struct User: Identifiable {
var id: String
}
func displayID(thing: Identifiable) {
    print("My ID is \(thing.id)")
}

// Protocol inheritance
protocol Payable {
    func calculateWages() -> Int
}
protocol NeedsTraining {
    func study()
}
protocol HasVacation {
    func takeVacation(days: Int)
}
protocol Empoyee: Payable, NeedsTraining, HasVacation {}

// Extensions
extension Int {
    func squared() -> Int {
        return self * self
    }
}
let number = 8
number.squared()
extension Int {
    var isEven: Bool {
        return self % 2 == 0
    }
}

// Protocol extensions
let pythons = ["Eric", "Graham", "John", "Michael", "Terry", "Terry"]
let beatles = Set(["John", "Paul", "George", "Ringo"])
extension Collection {
    func summarize() {
        print("There are \(count) of us:")

        for name in self {
            print(name)
        }
    }
}
pythons.summarize()
beatles.summarize()
protocol Politician {
    var isDirty: Bool { get set }
    func takeBribe()
}
extension Politician {
    func takeBribe() {
        if isDirty {
            print("Thank you very much!")
        } else {
            print("Someone call the police!")
        }
    }
}
protocol Mammal {
    func eat()
}
extension Mammal {
    func eat() {
        print("Time for dinner!")
    }
}

// Protocol-oriented programming
protocol Identifiable1 {
    var id: String { get set }
    func identify()
}
extension Identifiable1 {
    func identify() {
        print("My ID is \(id).")
    }
}
struct User3: Identifiable1 {
    var id: String
}

let twostraws = User3(id: "twostraws")
twostraws.identify()
